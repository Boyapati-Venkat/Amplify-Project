type TransformedRecord @aws_api_key @aws_cognito_user_pools {
  id: ID!
  userId: String!
  name: String
  email: String
  score: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTransformedRecordConnection @aws_api_key @aws_cognito_user_pools {
  items: [TransformedRecord]!
  nextToken: String
}

input ModelTransformedRecordFilterInput {
  id: ModelIDInput
  userId: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  score: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTransformedRecordFilterInput]
  or: [ModelTransformedRecordFilterInput]
  not: ModelTransformedRecordFilterInput
  owner: ModelStringInput
}

type Query {
  getTransformedRecord(id: ID!): TransformedRecord @aws_api_key @aws_cognito_user_pools
  listTransformedRecords(filter: ModelTransformedRecordFilterInput, limit: Int, nextToken: String): ModelTransformedRecordConnection @aws_api_key @aws_cognito_user_pools
}

input ModelTransformedRecordConditionInput {
  userId: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  score: ModelIntInput
  createdAt: ModelStringInput
  and: [ModelTransformedRecordConditionInput]
  or: [ModelTransformedRecordConditionInput]
  not: ModelTransformedRecordConditionInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateTransformedRecordInput {
  id: ID
  userId: String!
  name: String
  email: String
  score: Int
  createdAt: AWSDateTime
}

input UpdateTransformedRecordInput {
  id: ID!
  userId: String
  name: String
  email: String
  score: Int
  createdAt: AWSDateTime
}

input DeleteTransformedRecordInput {
  id: ID!
}

type Mutation {
  createTransformedRecord(input: CreateTransformedRecordInput!, condition: ModelTransformedRecordConditionInput): TransformedRecord
  updateTransformedRecord(input: UpdateTransformedRecordInput!, condition: ModelTransformedRecordConditionInput): TransformedRecord
  deleteTransformedRecord(input: DeleteTransformedRecordInput!, condition: ModelTransformedRecordConditionInput): TransformedRecord
}

input ModelSubscriptionTransformedRecordFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  score: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTransformedRecordFilterInput]
  or: [ModelSubscriptionTransformedRecordFilterInput]
  owner: ModelStringInput
}

type Subscription {
  onCreateTransformedRecord(filter: ModelSubscriptionTransformedRecordFilterInput, owner: String): TransformedRecord @aws_subscribe(mutations: ["createTransformedRecord"]) @aws_api_key @aws_cognito_user_pools
  onUpdateTransformedRecord(filter: ModelSubscriptionTransformedRecordFilterInput, owner: String): TransformedRecord @aws_subscribe(mutations: ["updateTransformedRecord"]) @aws_api_key @aws_cognito_user_pools
  onDeleteTransformedRecord(filter: ModelSubscriptionTransformedRecordFilterInput, owner: String): TransformedRecord @aws_subscribe(mutations: ["deleteTransformedRecord"]) @aws_api_key @aws_cognito_user_pools
}
